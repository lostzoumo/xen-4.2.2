diff -r 11348b5f3ba7 trace.h
--- a/trace.h	Thu Aug 13 12:13:37 2009 +0100
+++ b/trace.h	Thu Aug 13 12:28:07 2009 +0100
@@ -51,30 +51,30 @@
 #define TRC_HVM_ENTRYEXIT 0x00081000   /* VMENTRY and #VMEXIT       */
 #define TRC_HVM_HANDLER   0x00082000   /* various HVM handlers      */
 
-#define TRC_SCHED_MIN       0x00021000   /* Just runstate changes */
-#define TRC_SCHED_VERBOSE   0x00028000   /* More inclusive scheduling */
-
 /* Trace events per class */
 #define TRC_LOST_RECORDS        (TRC_GEN + 1)
 #define TRC_TRACE_WRAP_BUFFER  (TRC_GEN + 2)
 #define TRC_TRACE_CPU_CHANGE    (TRC_GEN + 3)
+#define TRC_TRACE_VIRQ          (TRC_GEN + 4)
 
-#define TRC_SCHED_RUNSTATE_CHANGE (TRC_SCHED_MIN + 1)
-#define TRC_SCHED_DOM_ADD        (TRC_SCHED_VERBOSE +  1)
-#define TRC_SCHED_DOM_REM        (TRC_SCHED_VERBOSE +  2)
-#define TRC_SCHED_SLEEP          (TRC_SCHED_VERBOSE +  3)
-#define TRC_SCHED_WAKE           (TRC_SCHED_VERBOSE +  4)
-#define TRC_SCHED_YIELD          (TRC_SCHED_VERBOSE +  5)
-#define TRC_SCHED_BLOCK          (TRC_SCHED_VERBOSE +  6)
-#define TRC_SCHED_SHUTDOWN       (TRC_SCHED_VERBOSE +  7)
-#define TRC_SCHED_CTL            (TRC_SCHED_VERBOSE +  8)
-#define TRC_SCHED_ADJDOM         (TRC_SCHED_VERBOSE +  9)
-#define TRC_SCHED_SWITCH         (TRC_SCHED_VERBOSE + 10)
-#define TRC_SCHED_S_TIMER_FN     (TRC_SCHED_VERBOSE + 11)
-#define TRC_SCHED_T_TIMER_FN     (TRC_SCHED_VERBOSE + 12)
-#define TRC_SCHED_DOM_TIMER_FN   (TRC_SCHED_VERBOSE + 13)
-#define TRC_SCHED_SWITCH_INFPREV (TRC_SCHED_VERBOSE + 14)
-#define TRC_SCHED_SWITCH_INFNEXT (TRC_SCHED_VERBOSE + 15)
+#define TRC_SCHED_MIN 0x0081000
+
+#define TRC_SCHED_DOM_ADD       (TRC_SCHED +  1)
+#define TRC_SCHED_DOM_REM       (TRC_SCHED +  2)
+#define TRC_SCHED_SLEEP         (TRC_SCHED +  3)
+#define TRC_SCHED_WAKE          (TRC_SCHED +  4)
+#define TRC_SCHED_YIELD         (TRC_SCHED +  5)
+#define TRC_SCHED_BLOCK         (TRC_SCHED +  6)
+#define TRC_SCHED_SHUTDOWN      (TRC_SCHED +  7)
+#define TRC_SCHED_CTL           (TRC_SCHED +  8)
+#define TRC_SCHED_ADJDOM        (TRC_SCHED +  9)
+#define TRC_SCHED_SWITCH        (TRC_SCHED + 10)
+#define TRC_SCHED_S_TIMER_FN    (TRC_SCHED + 11)
+#define TRC_SCHED_T_TIMER_FN    (TRC_SCHED + 12)
+#define TRC_SCHED_DOM_TIMER_FN  (TRC_SCHED + 13)
+#define TRC_SCHED_SWITCH_INFPREV (TRC_SCHED + 14)
+#define TRC_SCHED_SWITCH_INFNEXT (TRC_SCHED + 15)
+#define TRC_SCHED_SHUTDOWN_CODE (TRC_SCHED +  16)
 
 #define TRC_MEM_PAGE_GRANT_MAP      (TRC_MEM + 1)
 #define TRC_MEM_PAGE_GRANT_UNMAP    (TRC_MEM + 2)
@@ -92,7 +92,7 @@
 #define TRC_PV_PTWR_EMULATION        (TRC_PV + 11)
 #define TRC_PV_PTWR_EMULATION_PAE    (TRC_PV + 12)
   /* Indicates that addresses in trace record are 64 bits */
-#define TRC_64_FLAG               (0x100) 
+#define TRC_PV_64_FLAG               (0x100) 
 
 #define TRC_SHADOW_NOT_SHADOW                 (TRC_SHADOW +  1)
 #define TRC_SHADOW_FAST_PROPAGATE             (TRC_SHADOW +  2)
@@ -105,28 +105,24 @@
 #define TRC_SHADOW_EMULATE_UNSHADOW_USER      (TRC_SHADOW +  9)
 #define TRC_SHADOW_EMULATE_UNSHADOW_EVTINJ    (TRC_SHADOW + 10)
 #define TRC_SHADOW_EMULATE_UNSHADOW_UNHANDLED (TRC_SHADOW + 11)
-#define TRC_SHADOW_WRMAP_BF                   (TRC_SHADOW + 12)
+#define TRC_SHADOW_EMULATE_UNSHADOW_HEURISTIC (TRC_SHADOW + 12)
 #define TRC_SHADOW_PREALLOC_UNPIN             (TRC_SHADOW + 13)
-#define TRC_SHADOW_RESYNC_FULL                (TRC_SHADOW + 14)
-#define TRC_SHADOW_RESYNC_ONLY                (TRC_SHADOW + 15)
+#define TRC_SHADOW_RESYNC_FULL                (TRC_SHADOW + 24)
+#define TRC_SHADOW_RESYNC_ONLY                (TRC_SHADOW + 25)
 
 /* trace events per subclass */
 #define TRC_HVM_VMENTRY         (TRC_HVM_ENTRYEXIT + 0x01)
 #define TRC_HVM_VMEXIT          (TRC_HVM_ENTRYEXIT + 0x02)
-#define TRC_HVM_VMEXIT64        (TRC_HVM_ENTRYEXIT + TRC_64_FLAG + 0x02)
+#define TRC_HVM_VMEXIT64        (TRC_HVM_ENTRYEXIT + 0x03)
 #define TRC_HVM_PF_XEN          (TRC_HVM_HANDLER + 0x01)
-#define TRC_HVM_PF_XEN64        (TRC_HVM_HANDLER + TRC_64_FLAG + 0x01)
 #define TRC_HVM_PF_INJECT       (TRC_HVM_HANDLER + 0x02)
-#define TRC_HVM_PF_INJECT64     (TRC_HVM_HANDLER + TRC_64_FLAG + 0x02)
 #define TRC_HVM_INJ_EXC         (TRC_HVM_HANDLER + 0x03)
 #define TRC_HVM_INJ_VIRQ        (TRC_HVM_HANDLER + 0x04)
 #define TRC_HVM_REINJ_VIRQ      (TRC_HVM_HANDLER + 0x05)
 #define TRC_HVM_IO_READ         (TRC_HVM_HANDLER + 0x06)
 #define TRC_HVM_IO_WRITE        (TRC_HVM_HANDLER + 0x07)
 #define TRC_HVM_CR_READ         (TRC_HVM_HANDLER + 0x08)
-#define TRC_HVM_CR_READ64       (TRC_HVM_HANDLER + TRC_64_FLAG + 0x08)
 #define TRC_HVM_CR_WRITE        (TRC_HVM_HANDLER + 0x09)
-#define TRC_HVM_CR_WRITE64      (TRC_HVM_HANDLER + TRC_64_FLAG + 0x09)
 #define TRC_HVM_DR_READ         (TRC_HVM_HANDLER + 0x0A)
 #define TRC_HVM_DR_WRITE        (TRC_HVM_HANDLER + 0x0B)
 #define TRC_HVM_MSR_READ        (TRC_HVM_HANDLER + 0x0C)
@@ -138,13 +134,14 @@
 #define TRC_HVM_VMMCALL         (TRC_HVM_HANDLER + 0x12)
 #define TRC_HVM_HLT             (TRC_HVM_HANDLER + 0x13)
 #define TRC_HVM_INVLPG          (TRC_HVM_HANDLER + 0x14)
-#define TRC_HVM_INVLPG64        (TRC_HVM_HANDLER + TRC_64_FLAG + 0x14)
 #define TRC_HVM_MCE             (TRC_HVM_HANDLER + 0x15)
 #define TRC_HVM_IO_ASSIST       (TRC_HVM_HANDLER + 0x16)
 #define TRC_HVM_MMIO_ASSIST     (TRC_HVM_HANDLER + 0x17)
 #define TRC_HVM_CLTS            (TRC_HVM_HANDLER + 0x18)
 #define TRC_HVM_LMSW            (TRC_HVM_HANDLER + 0x19)
-#define TRC_HVM_LMSW64          (TRC_HVM_HANDLER + TRC_64_FLAG + 0x19)
+#define TRC_HVM_PF_XEN64        (TRC_HVM_HANDLER + 0x20)
+#define TRC_HVM_PF_INJECT64     (TRC_HVM_HANDLER + 0x21)
+
 
 /* This structure represents a single trace buffer record. */
 struct t_rec {
@@ -167,14 +164,6 @@
  * field, indexes into an array of struct t_rec's.
  */
 struct t_buf {
-    /* Assume the data buffer size is X.  X is generally not a power of 2.
-     * CONS and PROD are incremented modulo (2*X):
-     *     0 <= cons < 2*X
-     *     0 <= prod < 2*X
-     * This is done because addition modulo X breaks at 2^32 when X is not a
-     * power of 2:
-     *     (((2^32 - 1) % X) + 1) % X != (2^32) % X
-     */
     uint32_t cons;   /* Offset of next item to be consumed by control tools. */
     uint32_t prod;   /* Offset of next item to be produced by Xen.           */
     /*  Records follow immediately after the meta-data header.    */
diff -r 11348b5f3ba7 xenalyze.c
--- a/xenalyze.c	Thu Aug 13 12:13:37 2009 +0100
+++ b/xenalyze.c	Thu Aug 13 12:28:07 2009 +0100
@@ -835,6 +835,8 @@
     HVM_EVENT_HANDLER_MMIO_ASSIST,
     HVM_EVENT_HANDLER_CLTS,
     HVM_EVENT_HANDLER_LMSW,
+    HVM_EVENT_HANDLER_PF_XEN64,
+    HVM_EVENT_HANDLER_PF_INJECT64,
     HVM_EVENT_HANDLER_MAX
 };
 char * hvm_event_handler_name[HVM_EVENT_HANDLER_MAX] = {
@@ -864,6 +866,8 @@
     "mmio_assist",
     "clts", /* 24 */
     "lmsw",
+    "pf_xen64",
+    "pf_inject64",
 };
 
 enum {
@@ -1074,10 +1078,9 @@
     PF_XEN_MAX,
 };
 
-#define SHADOW_WRMAP_BF       12
 #define SHADOW_PREALLOC_UNPIN 13
-#define SHADOW_RESYNC_FULL    14
-#define SHADOW_RESYNC_ONLY    15
+#define SHADOW_RESYNC_FULL 24
+#define SHADOW_RESYNC_ONLY 25
 
 char * pf_xen_name[PF_XEN_MAX] = {
     [PF_XEN_NOT_SHADOW]="propagate",
@@ -1202,8 +1205,7 @@
     /* In-flight accumulation information */
     union {
         struct {
-            unsigned port:31,
-                is_write:1;
+            unsigned port:16,size:16;
             unsigned long val;
         } io;
         struct pf_xen_extra pf_xen;
@@ -1227,7 +1229,7 @@
     unsigned long long rip;
     unsigned exit_reason, event_handler;
     char dump_header[256];
-    int short_summary_done:1, prealloc_unpin:1, wrmap_bf:1;
+    int short_summary_done:1, prealloc_unpin:1;
 
     /* Immediate processing */
     void *d;
@@ -3395,7 +3397,7 @@
 }
 
 
-#define HVM_IO_ASSIST_WRITE 0x200
+#define HVM_MMIO_ASSIST_WRITE 0x200
 void hvm_mmio_assist_process(struct record_info *ri, struct hvm_data *h)
 {
     struct pf_xen_extra *e = &h->inflight.pf_xen;
@@ -3577,14 +3579,39 @@
 {
     if(opt.dump_cooked)
     {
-        printf(" %s io_write port %x val %lx\n",
+        printf(" %s io_write port %x size %u val %lx\n",
                h->dump_header, h->inflight.io.port,
+               h->inflight.io.size,
                h->inflight.io.val);
     }
     if(opt.with_pio_enumeration)
         update_io_address(&h->summary.pio, h->inflight.io.port, 1, h->arc_cycles, 0);
 }
 
+void hvm_io_write_process(struct hvm_data *h)
+{
+    struct {
+        unsigned long port;
+        int size;
+        unsigned long val;
+    } *r = (typeof(r))h->d;
+
+    unsigned long long mask = ((1ULL<<(r->size<<3))-1);
+
+    h->inflight.io.port = r->port;
+    h->inflight.io.size = r->size;
+    h->inflight.io.val = r->val & mask;
+
+    if(opt.dump_all)
+    {
+        printf(" %s io_write port %lx size %d val %lx\n",
+               h->dump_header,
+               r->port, r->size, r->val);
+    }
+
+    h->post_process = hvm_io_write_postprocess;
+}
+
 void hvm_io_read_postprocess(struct hvm_data *h)
 {
     if(opt.dump_cooked)
@@ -3599,48 +3626,48 @@
         scatterplot_vs_time(h->exit_tsc, P.now - h->exit_tsc);
 }
 
-void hvm_io_assist_process(struct record_info *ri, struct hvm_data *h)
-{
-    union {
-        struct {
-            unsigned long port;
-            unsigned long data;
-        } x32;
-    } *r = (typeof(r))h->d;
-
-    union {
-        unsigned event;
-        struct {
-            unsigned minor:8,
-                x64:1,
-                write:2;
-        };
-    } mevt = { .event = ri->event };
-
-    if(mevt.x64) {
-        fprintf(stderr, "FATAL: Unexpected 64-bit PIO\n");
-        exit(1);
-    }
-
-    h->inflight.io.port = r->x32.port;
-    h->inflight.io.val = r->x32.data;
-
-    if(mevt.write) {
-        h->inflight.io.is_write = 1;
-        h->post_process = hvm_io_write_postprocess;
-    } else {
-        h->inflight.io.is_write = 0;
-        h->post_process = hvm_io_read_postprocess;
-    }
-
-    if(opt.dump_all)
-    {
-        printf(" %s io %s port %lx val %lx\n",
-               h->dump_header,
-               mevt.write?"write":"read",
-               r->x32.port,
-               r->x32.data);
-    }
+void hvm_io_assist_process(struct hvm_data *h)
+{
+    struct {
+        unsigned long val;
+    } *r = (typeof(r))h->d;
+
+    int size = h->inflight.io.size;
+    unsigned long long mask = ((1ULL<<(size<<3))-1);
+
+    h->inflight.io.val = r->val & mask;
+
+    if(opt.dump_all)
+    {
+        printf(" %s io_assist val %lx\n",
+               h->dump_header,
+               r->val);
+    }
+
+
+    if(!h->post_process)
+        fprintf(warn, "Strange, io_assist but post_process not set!\n");
+}
+
+void hvm_io_read_process(struct hvm_data *h)
+{
+    struct {
+        unsigned long port;
+        int size;
+    } *r = (typeof(r))h->d;
+
+    h->inflight.io.port = r->port;
+    h->inflight.io.size = r->size;
+    h->inflight.io.val = 0;
+
+    if(opt.dump_all)
+    {
+        printf(" %s io_read port %lx size %d\n",
+               h->dump_header,
+               r->port, r->size);
+    }
+
+    h->post_process = hvm_io_read_postprocess;
 }
 
 /* cr_write */
@@ -3954,43 +3981,31 @@
 
 }
 
-void hvm_cr_write_process(struct record_info *ri, struct hvm_data *h)
-{
-    union {
-        struct {
-            unsigned cr;
-            unsigned long val;
-        } x32;
-        struct {
-            unsigned cr;
-            unsigned long long val;
-        } x64;
-    } *r = (typeof(r))h->d;
-    unsigned cr;
-    unsigned long long val;
-
-    if(ri->event & TRC_64_FLAG) {
-        h->inflight.cr_write.cr = cr = r->x64.cr;
-        h->inflight.cr_write.val = val = r->x64.val;
-    } else {
-        h->inflight.cr_write.cr = cr = r->x32.cr;
-        h->inflight.cr_write.val = val = r->x32.val;
-    }
+void hvm_cr_write_process(struct hvm_data *h)
+{
+    struct {
+        /* FIXME -- 64-bit values */
+        unsigned cr;
+        unsigned val;
+    } *r = (typeof(r))h->d;
+
+    h->inflight.cr_write.cr = r->cr;
+    h->inflight.cr_write.val = r->val;
 
     h->post_process = hvm_cr_write_postprocess;
 
     if(opt.dump_all)
     {
-        if(cr == 3 && h->v->cr3.val) {
+        if(r->cr == 3 && h->v->cr3.val) {
             printf("]%s cr_write cr3 val %llx oval %llx %s\n",
                    h->dump_header, 
-                   val,
+                   (unsigned long long)r->val,
                    h->v->cr3.val,
-                   (h->v->cr3.val == val)?"flush":"switch");
+                   (h->v->cr3.val == r->val)?"flush":"switch");
         } else {
             printf(" %s cr_write cr%d val %llx\n",
                    h->dump_header, 
-                   cr, val);
+                   r->cr, (unsigned long long)r->val);
 
         }
     }
@@ -4026,7 +4041,7 @@
         unsigned long addr;
     } *r = (typeof(r))h->d;
 
-    if(ri->extra_words != (sizeof(*r)/sizeof(unsigned long) + 1))
+    if(ri->extra_words != (sizeof(*r)/sizeof(unsigned long)))
     {
         fprintf(warn, "FATAL: msr_write extra_words %d, expected %d!\n",
                 ri->extra_words, sizeof(*r)/sizeof(unsigned long));
@@ -4075,7 +4090,7 @@
         unsigned long addr;
     } *r = (typeof(r))h->d;
 
-    if(ri->extra_words != (sizeof(*r)/sizeof(unsigned long) + 1))
+    if(ri->extra_words != (sizeof(*r)/sizeof(unsigned long)))
     {
         fprintf(warn, "FATAL: msr_read extra_words %d, expected %d!\n",
                 ri->extra_words, sizeof(*r)/sizeof(unsigned long));
@@ -4230,34 +4245,36 @@
 
 void hvm_pf_inject_process(struct record_info *ri, struct hvm_data *h)
 {
-    union {
-        struct {
-            unsigned ec;
-            unsigned long cr2;
-        } x32;
-        struct {
-            unsigned ec;
-            unsigned long long cr2;
-        } x64;
-    } *r = (typeof(r))h->d;
+    struct {
+        union {
+            struct {
+                unsigned cr2, ec;
+            } x32;
+            struct {
+                unsigned long long cr2;
+                unsigned long ec;
+            } x64;
+        };
+    } *r = (typeof(r))h->d;
+    unsigned long long cr2;
     unsigned long ec;
-    unsigned long long cr2;
-    int is_64 = 0;
-
-    if(ri->event & TRC_64_FLAG) {
-        is_64 = 1;
-        cr2 = r->x64.cr2;
-        ec = r->x64.ec;
-    } else {
-        cr2 = r->x32.cr2;
-        ec = r->x32.ec;
+
+    if ( ri->event == TRC_HVM_PF_INJECT64 )
+    {
+        cr2=r->x64.cr2;
+        ec =r->x64.ec;
+    }
+    else
+    {
+        cr2=r->x32.cr2;
+        ec =r->x32.ec;
     }
 
     if ( opt.dump_cooked || opt.dump_all )
     {
             printf(" %3lu.%09lu %s pf_inject%s guest_cr2 %llx  guest_ec %lx\n",
                    ri->t.s, ri->t.ns, pcpu_string(ri->cpu),
-                   is_64?"64":"",
+                   ri->event==TRC_HVM_PF_INJECT64?"64":"",
                    cr2, ec);
     }
 }
@@ -4317,14 +4334,7 @@
 
     char *evt_string, evt_number[256];
     unsigned *d;
-    int i, evt, is_64 = 0;
-
-    evt = ri->event - TRC_HVM_HANDLER;
-
-    if(evt & TRC_64_FLAG) {
-        evt &= ~(TRC_64_FLAG);
-        is_64=1;
-    }
+    int i, evt = ri->event - TRC_HVM_HANDLER;
 
     if(evt < HVM_EVENT_HANDLER_MAX)
     {
@@ -4337,11 +4347,10 @@
     }
 
     d = ri->d;
-    printf("%s%s %s%s [",
+    printf("%s%s %s [",
            prefix,
            ri->dump_header,
-           evt_string,
-           is_64?"64":"");
+           evt_string);
         
     for(i=0; i<4; i++) 
     {
@@ -4426,18 +4435,21 @@
     case TRC_HVM_PF_XEN64:
         hvm_pf_xen_process(ri, h);
         break;
+    case TRC_HVM_IO_READ:
+        hvm_io_read_process(h);
+        break;
+    case TRC_HVM_IO_WRITE:
+        hvm_io_write_process(h);
+        break;
     case TRC_HVM_IO_ASSIST:
-    case TRC_HVM_IO_ASSIST|HVM_IO_ASSIST_WRITE:
-        hvm_io_assist_process(ri, h);
+        hvm_io_assist_process(h);
         break;
     case TRC_HVM_MMIO_ASSIST:
-    case TRC_HVM_MMIO_ASSIST|HVM_IO_ASSIST_WRITE:
-        /* FIXME: 64-bit */
+    case TRC_HVM_MMIO_ASSIST|HVM_MMIO_ASSIST_WRITE:
         hvm_mmio_assist_process(ri, h);
         break;
     case TRC_HVM_CR_WRITE:
-    case TRC_HVM_CR_WRITE64:
-        hvm_cr_write_process(ri, h);
+        hvm_cr_write_process(h);
         break;
     case TRC_HVM_MSR_WRITE:
       hvm_msr_write_process(ri, h);
@@ -4449,18 +4461,15 @@
         hvm_vmcall_process(ri, h);
         break;
     case TRC_HVM_CR_READ:
-    case TRC_HVM_CR_READ64:
     case TRC_HVM_DR_READ:
     case TRC_HVM_DR_WRITE:
     case TRC_HVM_CPUID:
     case TRC_HVM_SMI:
     case TRC_HVM_HLT:
     case TRC_HVM_INVLPG:
-    case TRC_HVM_INVLPG64:
     case TRC_HVM_MCE:
     case TRC_HVM_CLTS:
     case TRC_HVM_LMSW:
-    case TRC_HVM_LMSW64:
     default:
         if ( h->post_process != NULL )
             fprintf(warn, "Strange, h->postprocess already set!\n");
@@ -4594,19 +4603,17 @@
     struct {
         union {
             struct {
+                unsigned long long rip;
                 unsigned long exit_reason;
-                unsigned long long rip;
             } x64;
-#if 0
             struct {
                 unsigned long eip;
                 unsigned long exit_reason;
             } x32;
-#endif
         };
     } *r;
 
-    if(ri->extra_words != 4)
+    if(ri->extra_words != 2 && ri->extra_words != 3)
     {
         fprintf(warn, "FATAL: vmexit has unexpected extra words %d!\n",
                 ri->extra_words);
@@ -4622,21 +4629,18 @@
     h->vmexit_valid=1;
 
     if(ri->event == TRC_HVM_VMEXIT64) {
-#if 0
         if(v->guest_paging_levels != 4)
         {
             fprintf(warn, "%s: VMEXIT64, but guest_paging_levels %d.  Switching to 4.\n",
                     __func__, v->guest_paging_levels);
             v->guest_paging_levels = 4;
         }
-#endif
         if(!is_valid_addr64(r->x64.rip))
             fprintf(warn, "%s: invalid va %llx",
                     __func__, r->x64.rip);
         h->rip = r->x64.rip;
         h->exit_reason = r->x64.exit_reason;
     } else {
-#if 0
         if(v->guest_paging_levels == 4)
         {
             int new_paging_levels = opt.default_guest_paging_levels;
@@ -4648,9 +4652,6 @@
         }
         h->rip = r->x32.eip;
         h->exit_reason = r->x32.exit_reason;
-#endif
-        fprintf(stderr, "FATAL: Expected 64-bit-only traces from -unstable!\n");
-        exit(1);
     }
 
     if(opt.scatterplot_vmexit_eip)
@@ -4690,7 +4691,6 @@
     h->entry_tsc = 0;
     h->resyncs = 0;
     h->prealloc_unpin = 0;
-    h->wrmap_bf = 0;
     h->short_summary_done = 0;
 
     if(!opt.svm_mode && h->exit_reason == EXIT_REASON_EXCEPTION_NMI)
@@ -5330,16 +5330,19 @@
             update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_OOS_ADD], h->arc_cycles);
         if(e->flag_oos_fixup_evict)
             update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_OOS_EVICT], h->arc_cycles);
-        if(e->flag_promote)
+        if(e->flag_promote) {
             update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_PROMOTE], h->arc_cycles);
-        if(e->flag_wrmap) {
-            update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_WRMAP], h->arc_cycles);
-            if(e->flag_wrmap_brute_force || h->wrmap_bf)
-                update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_BRUTE_FORCE], h->arc_cycles);
-        } else if(e->flag_wrmap_brute_force || h->wrmap_bf) {
-            fprintf(warn, "Strange: wrmap_bf but not wrmap!\n");
-        }
-
+            if(e->flag_wrmap) {
+                update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_WRMAP], h->arc_cycles);
+                if(e->flag_wrmap_brute_force)
+                    update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_BRUTE_FORCE], h->arc_cycles);
+            } else if(e->flag_wrmap_brute_force) {
+                fprintf(warn, "Strange: wrmap_bf but not wrmap!\n");
+                
+            }
+
+        } else if(e->flag_wrmap)
+            fprintf(warn, "Strange, wrmap but not promote!\n");
 
         if(!(e->flag_promote || h->prealloc_unpin || e->flag_unsync)) 
             update_summary(&h->summary.pf_xen_fixup[PF_XEN_FIXUP_UPDATE_ONLY], h->arc_cycles);
@@ -5651,18 +5654,6 @@
         cr3_prealloc_unpin(h->v, r->gfn);
 }
 
-void shadow_wrmap_bf_process(struct record_info *ri, struct hvm_data *h) {
-    struct {
-        unsigned long long gfn;
-    } *r = (typeof(r))ri->d;
-
-    if(opt.dump_all || opt.dump_cooked)
-        printf(" %s wrmap-bf gfn %llx\n",
-               ri->dump_header, r->gfn);
-
-    h->wrmap_bf = 1;
-}
-
 void shadow_process(struct pcpu_info *p)
 {
     struct record_info *ri = &p->ri;
@@ -5727,9 +5718,6 @@
     case SHADOW_PREALLOC_UNPIN:
         shadow_prealloc_unpin_process(ri, h);
         break;
-    case SHADOW_WRMAP_BF:
-        shadow_wrmap_bf_process(ri, h);
-        break;
     default:
         if(sevt.minor <= PF_XEN_LAST_FAULT) {
             shadow_fault_generic_process(ri, h);
@@ -6887,6 +6875,12 @@
     case TRC_LOST_RECORDS_END:
         process_lost_records_end(p);
         break;
+    case TRC_TRACE_VIRQ:
+        if(opt.dump_all || opt.dump_cooked) {
+            printf(" %s trace_virq\n", ri->dump_header);
+        }
+        P.buffer_trace_virq_tsc = ri->tsc;
+        break;
     default:
         process_generic(ri);
     }
@@ -8359,7 +8353,7 @@
     .doc = "",
 };
 
-const char *argp_program_version = "xenalyze - Open-source xen-unstable (3.4)";
+const char *argp_program_version = "xenalyze - XenServer 5.0";
 const char *argp_program_bug_address = "George Dunlap <george.dunlap@eu.citrix.com>";
 
 
